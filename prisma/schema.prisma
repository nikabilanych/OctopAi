// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    userExperience UserExperience[]
    matches        Match[]
    songs          Songs[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserExperience {
    id                String @id @default(cuid())
    userId            String
    user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    fieldsInterest    String
    positionsInterest String
    userSkill         String

    @@index([userId])
}

model JobIndustry {
    id   String @id @default(cuid())
    name String

    Position Position[]
    Skill    Skill[]
}

model Position {
    id         String      @id @default(cuid())
    name       String
    industryId String
    industry   JobIndustry @relation(fields: [industryId], references: [id], onDelete: Cascade)

    Skill Skill[]

    @@index([industryId])
}

model Skill {
    id         String      @id @default(cuid())
    name       String
    industryId String
    industry   JobIndustry @relation(fields: [industryId], references: [id], onDelete: Cascade)
    jobId      String
    job        Position    @relation(fields: [jobId], references: [id], onDelete: Cascade)

    @@index([industryId])
    @@index([jobId])
}

model Match {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    jobs   String
    
    industries String

    @@index([userId])
}

model Songs {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    name        String
    url         String
    description String
    @@index([userId])
}
