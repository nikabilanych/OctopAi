// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    userExperience UserExperience[]
    matches        Match[]
    playlist       Playlist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Industry {

    id        Int                  @id @default(autoincrement())
    name      String @unique
    positionId Int 
    positions Position @relation(fields: [positionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([positionId])
}

model Position {
    id         Int                  @id @default(autoincrement())
    name       String @unique
    industries Industry[]
    skills     Skill[]
}

model Skill {
    id        Int               @id @default(autoincrement())
    name      String @unique
    positionId Int 
    positions Position @relation(fields: [positionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([positionId])
}

model UserExperience {
    id         Int     @id @default(autoincrement())
    user       User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId     String
    industries String
    positions  String?
    userSkill  String

    @@index([userId])
}

model Match {
    id        String @id @default(cuid())
    userId    String
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    positions String

    @@index([userId])
}

model Songs {
    id          Int      @id @default(autoincrement())
    playlistId  Int
    playlist    Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    title       String
    url         String
    description String?

    @@index([playlistId])
}

model Playlist {
    id     Int     @id @default(autoincrement())
    userId String
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    title  String
    songs  Songs[]

    @@index([userId])
}
