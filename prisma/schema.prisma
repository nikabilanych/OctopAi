// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    WorkExperience WorkExperience[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model WorkExperience {
    id             String    @id @default(cuid())
    userId         String
    user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    fieldsInterest String
    field          JobFields @relation(fields: [fieldsInterest], references: [id], onDelete: Cascade)
    skills         String

    @@index([userId])
    @@index([fieldsInterest])
}

model Job {
    id      String    @id @default(cuid())
    name    String
    fieldId String
    skills  String
    field   JobFields @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    Skills  Skills[]

    @@index([fieldId])
}

model Skills {
    id    String @id @default(cuid())
    name  String
    jobId String
    job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

    @@index([jobId])
}

model JobFields {
    id              String           @id @default(cuid())
    name            String
    positions       Job[]
    workExperiences WorkExperience[]
}
