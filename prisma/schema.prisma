// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       Profile[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    FREELANCER
    CLIENT
}

model Profile {
    id         String   @id @default(cuid())
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    role       UserRole @default(FREELANCER)
    imageUrl   String?
    name       String?
    skills     String?
    bio        String?
    location   String?
    url        String?
    website    String?
    phone      String?
    created_at DateTime @default(now())
    posts      Post[]

    @@index([userId])
}

model Post {
    id          String   @id @default(cuid())
    postedby    String
    profile     Profile  @relation(fields: [postedby], references: [id], onDelete: Cascade)
    title       String
    categoryId  String
    category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    description String
    location    String
    salaryRange String
    created_at  DateTime @default(now())
    updated_at  DateTime @default(now())

    @@index([postedby])
    @@index([categoryId])
}

model Category {
    id    String @id @default(cuid())
    name  String
    posts Post[]
}
